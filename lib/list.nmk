def '!' [(boolean)
	if false true boolean
]

def 'cadr' [(cadr-ls)
	cdr cadr-ls .car
]

def 'caddr' [(cadr-ls)
	cdr cadr-ls .cdr .car
]

def 'cddr' [(cddr-ls)
	cdr cddr-ls . cdr
]

def 'first' car
def 'second' cadr
def 'third' caddr

def 'last' [(last-ls)
	rev last-ls . car
]

def 'each' [(each-fun each-ls)
	call/cc '_break_' [
		null? each-ls . unless [
			call/cc '_next_' [
				car each-ls. each-fun
			]
			cdr each-ls . each each-fun
		]
	]
]

def 'break' [ jump '_break_' ]
def 'next' [ jump '_next_' ]

def 'each-line' [(each-line-fun each-line-str)
	/ each-line-str "\n" . each each-line-fun
]

def 'fold' [(fold-fun fold-initial fold-ls)
	null? fold-ls . if fold-initial [
		car fold-ls .0. fold-fun fold-initial . [(_fold-res)
			cdr fold-ls . fold fold-fun _fold-res
		]
	]
]

def 'map' [(map-fun map-ls)
	fold [(x res)
		map-fun x .0. cons res
	] emp map-ls . rev
]

def 'rev' [(rev-ls)
	fold [(x res) cons x res] emp rev-ls
]

def 'len' [(len-ls)
	fold [(x res)
		++ res
	] 0 len-ls
]

def 'ref' [(ref-num ref-ls)
	= ref-num 0 . if [car ref-ls] [
		- ref-num 1 . def '_tmp'
		cdr ref-ls . ref _tmp
	]
]

def 'take' [(t-n t-ls)
	len t-ls .0. - t-n . = 0 . if t-ls [
		rev t-ls . cdr .rev . take t-n
	]
]

def 'drop' [(d-n d-ls)
	= d-n 0 . if d-ls [
		-- d-n . def '_tmp'
		cdr d-ls . drop _tmp
	]
]

def 'make-arr' [(make-arr-seed make-arr-length)
	= make-arr-length 0 . if make-arr-seed [
		arr? make-arr-seed . if [
			ref 0 make-arr-seed .0. cons make-arr-seed
		] [
			cons make-arr-seed emp
		] . [(_tmp)
			-- make-arr-length . make-arr _tmp
		]
	]
]

def 'arr-set' [(arr-set-ls arr-set-pos arr-set-to)
	def 'arr-set-body' [(body-index body-limit body-res)
		< body-index body-limit . if [
			= body-index arr-set-pos . if [
				cons arr-set-to body-res
			] [
				ref body-index arr-set-ls .0. cons body-res
			] . [(_tmp)
				++ body-index .0. arr-set-body body-limit _tmp
			]
		] body-res
	]

	len arr-set-ls .1. arr-set-body 0 emp . rev
]

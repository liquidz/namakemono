(use srfi-1)
(use srfi-13)
(use file.util)
(use gauche.parseopt)
(use gauche.process)
(use simply)

(require "@NMK_PATH@/src/common")
(require "@NMK_PATH@/src/words")
(require "@NMK_PATH@/src/parser")

(define *library-path* "@NMK_PATH@/lib")
(define *scanner-path* "@NMK_PATH@/src/scanner/nmk-scan")

; =init
; -----------------------
(define (namakemono-initialize)
  ; default words
  (for-each
    (lambda (x)
      (set-variable (car x) (cadr x))
      )
    *words*)

  ; library
  (for-each load-source (collect-library *library-path*))
  )

; =run-tokens
; ------------------
(define (run-tokens all-tokens)
  (debug 4 "* all tokens\n  " all-tokens)
  (fold
    (lambda (each-line-token last-result)
      (let1 each-pipe-token (list-split each-line-token (lambda (x) (eq? (car x) :pipe)))
        (cond
          [(! null? each-pipe-token)
           (debug 4 "* each pipe token\n  " each-pipe-token)
           (let1 res (parser each-pipe-token)
             (debug 4 "")
             res
             )
           ]
          [else last-result]
          )
        )
      )
    '()
    (list-split all-tokens (lambda (x) (eq? (car x) :end)))
    )
  )

; =collect-library
; --------------------
(define (collect-library path)
  (fold
    (lambda (file res)
      (cond
        [(file-is-directory? file)
         (append res (collect-library file))
         ]
        [else
          (if (#/.+\.nmk$/ file)
            (append res (list file))
            res
            )
          ]
        )
      )
    '()
    (directory-list path :children? #t :add-path? #t))
  )

; =scanner
; ----------------
(define (scanner source-code)
  (call-with-process-io
    *scanner-path*
    (lambda (in out)
      (display source-code out)
      (close-output-port out)
      (read in)
      ))
  )

; =run-source
; --------------------
(define (run-source source-code)
  (let1 all-tokens (scanner source-code)
    (run-tokens (collect-lambda all-tokens))
    )
  )

; =load-source
; ----------------
(define (load-source filename)
  (let1 code (call-with-input-process #`",|*scanner-path*| ,|filename|" read)
    (run-tokens (collect-lambda code))
    )
  )

; =command-line-environment
(define (command-line-environment)
  (define (get-user-input)
    (display "nmk> ")
    (flush)
    (read-line)
    )

  (let loop((input (get-user-input)))
    (cond
      [(or (! string? input) (string=? input "exit"))
       (print "bye")
       ]
      [(! string=? input "")
       (let1 res (guard (e (else e))
                   (run-source input)
                   )
         (print (if (eq? (class-of res) <error>) (slot-ref res 'message) res))
         (loop (get-user-input))
         )
       ]
      [else
        (loop (get-user-input))
        ]
      )
    )
  )

; =one-liner
; ----------------------
(define (one-liner options rest-args has-standard-input)
  (let ((code (options 'e))
        (each-line (options 'n))
        (print-result (options 'p))
        )
    (let1 res (run-source (cond
                            [each-line
                              ; 行単位での処理の場合
                              (if has-standard-input
                                ; 標準入力があればそれを処理する
                                #`"_ . each-line [ ,|code| ]"
                                ; なければ残りの引数の先頭をファイル名と見なし処理する
                                (let1 input-file (car rest-args)
                                  #`"file->list ',|input-file|' . each [ ,|code| ]")
                                )
                              ]
                            [else
                              (when (and (! has-standard-input)
                                      (> (length rest-args) 0))
                                ; 標準入力がない場合は暗黙知に何も入っていないので
                                ; 残りの引数の先頭をファイル名と見なし読み込んでおく
                                (set-variable (make-keyword *implicit-variable*)
                                              (file->string (car rest-args)))
                                )
                              code
                              ]
                            )
                          )
      (when print-result (print res))
      )
    )
  (exit)
  )

; =version-print
; -----------------
(define (version-print)
  (print "namakemono " *nmk-version*)
  (exit)
  )

; =usage
; ------------------
(define (usage)
  (print "")
  (print "Usage: nmk [switches] [programfile] [arguments]")
  (print "  -d <debug lebel>  run program with this debug level")
  (print "  -e <command>      one line program")
  (print "  -n                assume '_ . each-line [ ... ]'")
  (print "  -p                print final result")
  (print "  -v                print version")
  (print "")
  (exit)
  )

; =main
; ---------------
(define (main args)
  (receive (options rest-args) (args->hash (cdr args)
                                           '((d 1 0)
                                             (e 1 #f)
                                             n p v h
                                             ))
    ; version print
    (when (options 'v) (version-print))

    ; usage print
    (when (options 'h) (usage))

    ; initialize
    (namakemono-initialize)

    ; set debug
    (set! *debug* (options 'd))

    ; else
    (let ((has-standard-input (char-ready? (standard-input-port)))
          (imp-var (make-keyword *implicit-variable*))
          )
      ; 標準入力があれば暗黙値として保存
      (when has-standard-input (set-variable imp-var (port->string (standard-input-port))))
      ; one-liner
      (when (options 'e) (one-liner options rest-args has-standard-input))

      ; else
      (case (length rest-args)
        [(0)
         (if has-standard-input
           ; 標準入力があればそれを実行
           (run-source (get-variable imp-var))
           ; なければコマンドライン環境
           (command-line-environment)
           )
         ]
        [else
          ; command-line parameter
          (set-variable :*args* (cdr rest-args))
          ; load and run source
          (load-source (car rest-args))
          ]
        )

      )
    #|
    (let1 stdin (standard-input-port)
      (when (char-ready? stdin)
        (set-variable (make-keyword *implicit-variable*) (port->string stdin)
                      )
        (cond
          [(char-ready? stdin)
           ; 標準入力でソースが読まれた場合
           (run-source (port->string stdin))
           ]
          [else
            ; ファイルの実行など
            (case (length rest-args)
              ; command line mode
              [(0)
               (command-line-environment)
               ]

              ; file execute mode
              [else
                ; command-line parameter
                (set-variable :*args* (cdr rest-args))
                ; load and run source
                (load-source (car rest-args))
                ]
              )
            ]
          )
        )
      )
    |#
    )
  0
  )


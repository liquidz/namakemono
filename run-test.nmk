pr "* print test: passed" .nl

; ===================================

pr "* decimal number test"
+ -10 1.3 . = -8.7 . if "passed" "ng" . pr . nl

; ===================================

pr "* fractional number test"
+ 10/3 2/3 . = 4 . if "passed" "ng" . pr . nl

; ===================================

pr "* pipe test:"
arr 1 2 3 .each pr
pr "passed" .nl

; ===================================

pr "* variable test"
def 'i' 1
i . + 3 . = 4 . if "passed" "ng" . pr . nl

; ===================================

pr "* function test"
arr 1 2 3 . fold [(x r)
	+ x r
] 0 . = 6 . if "passed" "ng" . pr .  nl

; ===================================

pr "* implicit variable"
arr 4 5 6 . each [
	% _ 2 . = 1 . when [
		= 5 _ . if "passed" "ng" . pr . nl
	]
]

; ===================================

pr "* recursion test"
def 'fact' [ (num)
	= num 0 . if 1 [
		- num 1 . fact . * num
	]
]
fact 5 . = 120 . if "passed" "ng" . pr . nl

; ===================================

pr "* flexible length argument test"
[(a b *c)
	;hello
	and [= a 1] [= b 2] [arr 3 4 5 . = c] . if "passed" "ng" . pr . nl
] 1 2 3 4 5
;pr "passed" . nl

; ===================================

pr "* this syntax test"
def 'check' [
	[(n) ++ n]
]
check . this 3 . = 4 . if "passed" "ng" . pr . nl

; ===================================

pr "* pipe position test"
4 .0. - 1 . = 3 . if "passed" "ng" . pr . nl

; ===================================

pr "* simple lambda test"
= 1 1 . if ,pr 'passed',,pr 'ng',
nl

; ===================================

pr "* ldef test"
let 'a' 2 'b' 3 'c' 4 [
	+ a b c . = 9 . if "passed" "ng" . pr . nl
]

; ===================================

pr "* overload test"
def 'ol-check' [(*x) apply + x]
def 'ol-check' [(x y) - x y]
and [ol-check 1 2 3 . = 6] [ol-check 4 3 . = 1] . if "passed" "ng" . pr . nl
